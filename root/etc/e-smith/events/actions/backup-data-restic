#!/usr/bin/perl -w

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use File::Temp;
use NethServer::BackupData;
use NethServer::Password;

use constant CMD => '/usr/bin/restic';

my $name = $ARGV[0] || '';

my $confdb = esmith::ConfigDB->open;
my $systemname = $confdb->get('SystemName') or die "No SystemName db entry found\n";
$systemname = $systemname->prop('type');

my $restic_repository;
my $db = esmith::ConfigDB->open_ro('backups') || die("Could not open backups db\n");
my $record = $db->get($name) || die("No backup '$name' found");
my $logFile = "/var/log/last-backup-$name.log";
my $restic_password = NethServer::Password::store("restic_$name"); 

my $VFSType = $record->prop('VFSType') || die("No VFSType specified");
my $cleanup = lc($record->prop('CleanupOlderThan')) || 'never';
my $opts = " --cache-dir /var/lib/nethserver/backup/restic/$name --password-file /var/lib/nethserver/secrets/restic_$name";

if ( -x "/etc/e-smith/events/actions/mount-$VFSType" ) {
    # Local filesystem, just mount it
    system("/etc/e-smith/events/actions/mount-$VFSType $name");
    $restic_repository = "/mnt/backup-$name/$name/"
} else {
    # Remote destination
    if ($VFSType eq 'sftp') {
        my $host = $record->prop('SftpHost');
        my $user = $record->prop('SftpUser');
        my $dir = $record->prop('SftpDirectory');
        $restic_repository = "sftp:$user\@$host:$dir";
    } elsif ($VFSType eq 's3') {
        my $host = $record->prop('S3Host');
        my $access = $record->prop('S3AccessKey');
        my $secret = $record->prop('S3SecretKey');
        my $bucket = $record->prop('S3Bucket');
        $ENV{AWS_ACCESS_KEY_ID} = $access;
        $ENV{AWS_SECRET_ACCESS_KEY} = $secret;
        $restic_repository = "s3:$host/$bucket";
    } elsif ($VFSType eq 'b2') {
        my $account = $record->prop('B2AccountId');
        my $key = $record->prop('B2AccountKey');
        my $bucket = $record->prop('B2Bucket');
        $ENV{B2_ACCOUNT_ID} = $account;
        $ENV{B2_ACCOUNT_KEY} = $key;
        $restic_repository = "b2:$bucket:/$systemname";
    } elsif ($VFSType eq 'rest') {
        my $host = $record->prop('RestHost');
        my $port = $record->prop('RestPort');
        my $user = $record->prop('RestUser') || '';
        my $password = $record->prop('RestPassword') || '';
        my $protocol = $record->prop('RestProtocol');
        my $dir = $record->prop('RestDirectory');
        my $auth = '';
        if ($user ne '' && $password ne '') {
           $auth = "$user:$password@";
        }
        $restic_repository = "rest:$protocol://$auth$host:$port/$dir"
    } else {
        die("Invalid VFSType: $VFSType");
    }
}

$opts .= " --repo $restic_repository";

# Check if repository is already initialized, otherwise do it
my $ret = system(CMD." $opts snapshots &>/dev/null");
if ($ret != 0) {
    system(CMD." $opts init");
}


our $backup = new NethServer::BackupData();

# Read include and exclude from default directory or customized file
my @include_data_files;
my @exclude_data_files;

if ( $name ne '' && -f "/etc/backup-data/$name.include" ) {
    @include_data_files = $backup->load_file_list("/etc/backup-data/$name.include");
} else {
    @include_data_files = $backup->includes(NethServer::BackupData::CONF_DIR);
}

if ( $name ne '' && -f "/etc/backup-data/$name.exclude" ) {
    @exclude_data_files = $backup->load_file_list("/etc/backup-data/$name.exclude");
} else {
    @exclude_data_files = $backup->excludes(NethServer::BackupData::CONF_DIR);
}

if (!@include_data_files) {
    $backup->logger('ERROR',"Nothing to backup - 1");
    exit 1;
}

# Create globbing file list
my $tmp_include = File::Temp->new(UNLINK => 1);
chmod(0600,$tmp_include->filename);

my $tmp_exclude = File::Temp->new(UNLINK => 1);
chmod(0600,$tmp_exclude->filename);

$backup->uniq(\@include_data_files);
$backup->uniq(\@exclude_data_files);

foreach  (@exclude_data_files) {
   print $tmp_exclude "$_\n";
}
foreach  (@include_data_files) {
   print $tmp_include "$_\n";
}

$opts .= " --exclude-file $tmp_exclude --files-from $tmp_include";


$ret = system(CMD." $opts backup &>$logFile");

if ($ret != 0) {
   $backup->logger("ERROR","Backup failed, see $logFile for details - $ret");
   exit 1; 
}

if ($cleanup ne 'never') {
    $ret = system(CMD." $opts forget --keep-within $cleanup &>$logFile");
    $backup->logger("ERROR","Cleanup failed, see $logFile for details - $ret");
}

if ( -x "/etc/e-smith/events/actions/umount-$VFSType" ) {
    system("/etc/e-smith/events/actions/umount-$VFSType $name");
}

exit (0);
