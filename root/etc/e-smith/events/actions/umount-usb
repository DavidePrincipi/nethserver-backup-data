#!/usr/bin/perl -w

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
#
# Original work:
# copyright (C) 2006-2007 Jean-Paul Leclere <jean-paul@leclere.org>
# copyright (C) 2007 Charlie Brady <charlieb@e-smith.com>
#
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use Errno;
use esmith::ConfigDB;
use NethServer::BackupData;

sub ldie;

# The action can be invoked from post-backup-data event or directly from a script.
# If invoked from a script, just pass the name of the backup.
my $name = shift || '';

my $backupwk;
our $mntdir;
my $confdb = esmith::ConfigDB->open;
if ($name eq 'post-backup-data' || $name eq 'post-restore-data' || $name eq '') {
   $backupwk = $confdb->get('backup-data') || die "No backup-data db entry found\n";;
   $mntdir = $backupwk->prop('Mount') || '/mnt/backup';
} else {
   my $db = esmith::ConfigDB->open_ro('backups') || die("Could not open backups db\n");
   $backupwk = $db->get($name) || die("No backup '$name' found");
   $mntdir = "/mnt/backup-$name";
}

my $usblabel = $backupwk->prop('USBLabel');
my $VFSType = $backupwk->prop('VFSType') || 'UNKNOWN';
my $err = 0;
my $mntdone = 0;

exit 0 unless ($VFSType eq 'usb');

our $b = new NethServer::BackupData();

# get the device name
my $device = qx( /sbin/blkid -u filesystem -L $usblabel);
chomp $device; # remove trailing new line

# verify backup directory not already mounted

if ($b->is_mounted($device)) {
    system("/bin/umount", "$mntdir");
}

exit 0;

sub ldie 
{
    my $errmsg = shift;
    system("/bin/umount", "$mntdir") if $mntdone;
    $b->bad_exit($errmsg);
}

