#! /usr/bin/perl -w
#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use NethServer::BackupData;
use POSIX qw/strftime/;
use JSON;
use Getopt::Std;

use constant MAX_TIME => 300;
use constant DEBUG => 0;

sub print_help
{
    print "Usage $0 [-b <backup_name>] [-h]\n";
    print "  -b : specify the name of backup to use\n";
    print "  -h : show this help\n";
}

my %options=();
getopts("hb:", \%options);
my $help = $options{h};
my $name = $options{b} || '';

if ($help)
{
  print_help();
  exit(0);
}

my $backup;
my $program;
my $logFile;
my $status;
my %du;
my $timeout = 0;
my $conf = esmith::ConfigDB->open || die("Could not open config db\n");
if ($name eq '') {
   $backup = $conf->get('backup-data');
   $program = $backup->prop('Program') || 'duplicity';
   $logFile = '/var/log/last-backup.log';
} else {
   my $db = esmith::ConfigDB->open_ro('backups') || die("Could not open backups db\n");
   $backup = $db->get($name) || die("No backup '$name' found");
   $program = $backup->prop('type') || 'duplicity';
   $logFile = "/var/log/last-backup-$name.log";
}
# valid values for notify are: always, error, never
my $notify = $backup->prop('Notify') || $backup->prop('notify') || 'error';
my $notify_to = $backup->prop('NotifyTo') || $backup->prop('notifyTo') || 'root';
my $notify_from = $backup->prop('NotifyFrom') || $backup->prop('notifyFrom') || 'root';
my $duLogFile = '/var/lib/nethserver/backup/disk_usage';

$backup = new NethServer::BackupData($name, $notify, $notify_to, $notify_from);

# remove log file
if ( -e $logFile) {
   unlink($logFile);
}

$backup->cleanup_notification();
$backup->notify("===== Report for data backup =====\n");

my $start = time;
$backup->notify("Backup started at %s", strftime('%F %T',localtime));
$backup->logger("START","Backup data started");

# if there is a pre-backup-data running, wait for it
do {
    sleep(1);
    $timeout++;
    if ($timeout >= MAX_TIME) {
        $backup->bad_exit("Timeout while waiting pre-backup-data");
    }
    debug("Waiting for pre-backup-data: slept for $timeout seconds");
} while ($backup->is_running('/sbin/e-smith/signal-event pre-backup-data',1));

# if there are other backup still running, no need to execute pre-backup-data again
if (!$backup->is_running('backup-data')) {
    debug("No concurrent backup, starting pre-backup-data");
    if ($status = system(qw(/sbin/e-smith/signal-event pre-backup-data)))
    {
        $backup->notify("Pre backup scripts status: ERROR");
        $backup->bad_exit("Event pre-backup-data failed", $status>>8);
    }
    $backup->logger("STEP","pre-backup-done done");
    $backup->notify("Pre backup scripts status: SUCCESS");
} else {
    debug("Concurrent backup found, skipping pre-backup-data");
    $backup->logger("STEP","pre-backup-done skipped");
    $backup->notify("Pre backup scripts status: SKIP");
}

debug("Runinng backup-data-$program $name");
if ($status = system("/etc/e-smith/events/actions/backup-data-$program $name"))
{
    debug("backup-data-$program failed");
    $backup->notify("Backup script status: ERROR");
    $backup->bad_exit("Action backup-data-$program failed", $status>>8, $logFile);
}
$backup->logger("STEP","backup-data-$program done");

# if there are other backup still running, only last process wil execute post-backup-data
if (!$backup->is_running('backup-data')) {
    debug("No concurrent backup, starting post-backup-data");
    if ($status = system(qw(/sbin/e-smith/signal-event post-backup-data)))
    {
        $backup->notify("Post backup scripts status: ERROR");
        $backup->bad_exit("Event post-backup-data failed", $status>>8);
    }
    $backup->notify("Post backup scripts status: SUCCESS");
} else {
    debug("Concurrent backup found, skipping post-backup-data");
    $backup->notify("Post backup scripts status: SKIP");
}

debug("Backup ended successfully");
$backup->logger("SUCCESS","Backup done");
$backup->notify("Backup status: SUCCESS");
$backup->notify("Backup ended at %s", strftime('%F %T',localtime));
my $duration = time - $start;
$backup->notify("Time elapsed: %s hours, %s minutes, %s seconds", ($duration/(60*60))%24, ($duration/60)%60, $duration%60);

if ($name eq '') {
    # disk usage stats
    if ( open(FILE, "<$duLogFile") ) {
        %du = %{decode_json(join('', <FILE>))};
        close(FILE);
        if ($du{'size'}) { $du{'size'} = format_bytes($du{'size'}*1024); }
        if ($du{'used'}) { $du{'used'} = format_bytes($du{'used'}*1024); }
        if ($du{'avail'}) { $du{'avail'} = format_bytes($du{'avail'}*1024); }
        if ($du{'pcent'}) { $du{'pcent'} .= '%'; }
    } else {
        warn("[WARNING] Could not open $duLogFile\n");
    }
    $backup->notify("\nDisk Usage:\n%10s %10s %10s %8s", 'Size', 'Used', 'Available', 'Use%');
    $backup->notify("%10s %10s %10s %8s", $du{'size'}||'-', $du{'used'}||'-', $du{'avail'}||'-', $du{'pcent'}||'-');
}


$backup->send_notification(0,$logFile);


exit 0;

sub format_bytes {
    my $size = shift;
    my $exp = 0;

    CORE::state $units = [qw(B KB MB GB TB PB EB ZB YB)];

    for (@$units) {
        last if $size < 1024;
        $size /= 1024;
        $exp++;
    }

    return wantarray ? ($size, $units->[$exp]) : sprintf("%.2f %s", $size, $units->[$exp]);
}


sub debug {
   my $msg = shift;
   print "[DEBUG] $msg\n" if (DEBUG);
}
